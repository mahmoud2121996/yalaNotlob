{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\njQuery = require('jquery');\n\nvar Notifications = /*#__PURE__*/function () {\n  function Notifications() {\n    var _this = this;\n\n    _classCallCheck(this, Notifications);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleSuccess = this.handleSuccess.bind(this);\n    this.notifications = $(\"[data-behavior='notifications']\");\n\n    if (this.notifications.length > 0) {\n      this.handleSuccess(this.notifications.data(\"notifications\"));\n      $(\"[data-behavior='notifications-link']\").on(\"click\", this.handleClick);\n      console.log(this.notifications.length);\n      setInterval(function () {\n        return _this.getNewNotifications();\n      }, 5000);\n    }\n  }\n\n  _createClass(Notifications, [{\n    key: \"getNewNotifications\",\n    value: function getNewNotifications() {\n      return $.ajax({\n        url: \"/notifications.json\",\n        dataType: \"JSON\",\n        method: \"GET\",\n        success: this.handleSuccess\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      return $.ajax({\n        url: \"/notifications/mark_as_read\",\n        dataType: \"JSON\",\n        method: \"POST\",\n        success: function success() {\n          return $(\"[data-behavior='unread-count']\").text(0);\n        }\n      });\n    }\n  }, {\n    key: \"handleSuccess\",\n    value: function handleSuccess(data) {\n      var items = $.map(data, function (notification) {\n        return notification.template;\n      });\n      var unread_count = 0;\n      $.each(data, function (i, notification) {\n        if (notification.unread) {\n          return unread_count += 1;\n        }\n      });\n      $(\"[data-behavior='unread-count']\").text(unread_count);\n      return $(\"[data-behavior='notification-items']\").html(items);\n    }\n  }]);\n\n  return Notifications;\n}();\n\njQuery(function () {\n  return new Notifications();\n});","map":{"version":3,"sources":["/run/media/tarek/62E44193E4416A7D/ITI/Ruby/yalaNotlob/app/javascript/custom/notifications/notifications.js"],"names":["jQuery","require","Notifications","handleClick","bind","handleSuccess","notifications","$","length","data","on","console","log","setInterval","getNewNotifications","ajax","url","dataType","method","success","e","text","items","map","notification","template","unread_count","each","i","unread","html"],"mappings":";;;;;;AAAAA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAhB;;IACMC,a;AACF,2BAAc;AAAA;;AAAA;;AACV,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,aAAL,GAAqBC,CAAC,CAAC,iCAAD,CAAtB;;AAEA,QAAI,KAAKD,aAAL,CAAmBE,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,WAAKH,aAAL,CAAmB,KAAKC,aAAL,CAAmBG,IAAnB,CAAwB,eAAxB,CAAnB;AACAF,MAAAA,CAAC,CAAC,sCAAD,CAAD,CAA0CG,EAA1C,CAA6C,OAA7C,EAAsD,KAAKP,WAA3D;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,aAAL,CAAmBE,MAA/B;AACAK,MAAAA,WAAW,CAAE,YAAM;AACf,eAAO,KAAI,CAACC,mBAAL,EAAP;AACH,OAFU,EAEP,IAFO,CAAX;AAGH;AACJ;;;;0CAEqB;AAClB,aAAOP,CAAC,CAACQ,IAAF,CAAO;AACVC,QAAAA,GAAG,EAAE,qBADK;AAEVC,QAAAA,QAAQ,EAAE,MAFA;AAGVC,QAAAA,MAAM,EAAE,KAHE;AAIVC,QAAAA,OAAO,EAAE,KAAKd;AAJJ,OAAP,CAAP;AAMH;;;gCAEWe,C,EAAG;AACX,aAAOb,CAAC,CAACQ,IAAF,CAAO;AACVC,QAAAA,GAAG,EAAE,6BADK;AAEVC,QAAAA,QAAQ,EAAE,MAFA;AAGVC,QAAAA,MAAM,EAAE,MAHE;AAIVC,QAAAA,OAJU,qBAIA;AACN,iBAAOZ,CAAC,CAAC,gCAAD,CAAD,CAAoCc,IAApC,CAAyC,CAAzC,CAAP;AACH;AANS,OAAP,CAAP;AAQH;;;kCAEaZ,I,EAAM;AAChB,UAAMa,KAAK,GAAGf,CAAC,CAACgB,GAAF,CAAMd,IAAN,EAAY,UAAAe,YAAY;AAAA,eAAIA,YAAY,CAACC,QAAjB;AAAA,OAAxB,CAAd;AAEA,UAAIC,YAAY,GAAG,CAAnB;AACAnB,MAAAA,CAAC,CAACoB,IAAF,CAAOlB,IAAP,EAAa,UAASmB,CAAT,EAAYJ,YAAZ,EAA0B;AACnC,YAAIA,YAAY,CAACK,MAAjB,EAAyB;AACrB,iBAAOH,YAAY,IAAI,CAAvB;AACH;AACJ,OAJD;AAMAnB,MAAAA,CAAC,CAAC,gCAAD,CAAD,CAAoCc,IAApC,CAAyCK,YAAzC;AACA,aAAOnB,CAAC,CAAC,sCAAD,CAAD,CAA0CuB,IAA1C,CAA+CR,KAA/C,CAAP;AACH;;;;;;AAGLtB,MAAM,CAAC;AAAA,SAAM,IAAIE,aAAJ,EAAN;AAAA,CAAD,CAAN","sourcesContent":["jQuery = require('jquery')\nclass Notifications {\n    constructor() {\n        this.handleClick = this.handleClick.bind(this);\n        this.handleSuccess = this.handleSuccess.bind(this);\n        this.notifications = $(\"[data-behavior='notifications']\");\n\n        if (this.notifications.length > 0) {\n            this.handleSuccess(this.notifications.data(\"notifications\"));\n            $(\"[data-behavior='notifications-link']\").on(\"click\", this.handleClick);\n            console.log(this.notifications.length)\n            setInterval((() => {\n                return this.getNewNotifications();\n            }), 5000);\n        }\n    }\n\n    getNewNotifications() {\n        return $.ajax({\n            url: \"/notifications.json\",\n            dataType: \"JSON\",\n            method: \"GET\",\n            success: this.handleSuccess\n        });\n    }\n\n    handleClick(e) {\n        return $.ajax({\n            url: \"/notifications/mark_as_read\",\n            dataType: \"JSON\",\n            method: \"POST\",\n            success() {\n                return $(\"[data-behavior='unread-count']\").text(0);\n            }\n        });\n    }\n\n    handleSuccess(data) {\n        const items = $.map(data, notification => notification.template);\n\n        let unread_count = 0;\n        $.each(data, function(i, notification) {\n            if (notification.unread) {\n                return unread_count += 1;\n            }\n        });\n\n        $(\"[data-behavior='unread-count']\").text(unread_count);\n        return $(\"[data-behavior='notification-items']\").html(items);\n    }\n}\n\njQuery(() => new Notifications);"]},"metadata":{},"sourceType":"module"}