{"ast":null,"code":"'use strict';\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar is = require('is-type-of');\n\nvar _assert = require('assert');\n\nvar show = require('./show');\n\nvar Rule = /*#__PURE__*/function () {\n  function Rule(_ref) {\n    var ctx = _ref.ctx,\n        type = _ref.type,\n        expected = _ref.expected,\n        args = _ref.args,\n        isOpposite = _ref.isOpposite;\n\n    _classCallCheck(this, Rule);\n\n    this.ctx = ctx;\n    this.type = type;\n    this.expected = [].concat(expected);\n    this.args = args;\n    this.isOpposite = isOpposite === true;\n  }\n\n  _createClass(Rule, [{\n    key: \"validate\",\n    value: function validate(message) {\n      var actual = this.ctx[this.type];\n\n      var _iterator = _createForOfIteratorHelper(this.expected),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var expected = _step.value;\n          message = this.formatMessage(actual, expected, message);\n          this.assert(actual, expected, message);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"assert\",\n    value: function assert(actual, expected, message) {\n      var assertFn = _assert[this.isOpposite ? 'notStrictEqual' : 'strictEqual'];\n\n      if (is.regexp(expected)) {\n        return assertFn(expected.test(actual), true, message);\n      }\n\n      return assertFn(actual, expected, message);\n    }\n  }, {\n    key: \"formatMessage\",\n    value: function formatMessage(actual, expected, message) {\n      message = message || \"match \".concat(this.type);\n      return \"should \".concat(this.isOpposite ? 'not ' : '').concat(message, \" expected `\").concat(this.inspectObj(expected), \"` but actual `\").concat(this.inspectObj(actual), \"`\");\n    }\n  }, {\n    key: \"inspectObj\",\n    value: function inspectObj(obj) {\n      return show(obj);\n    }\n  }]);\n\n  return Rule;\n}();\n\nmodule.exports = Rule;","map":null,"metadata":{},"sourceType":"module"}