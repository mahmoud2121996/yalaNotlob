{"ast":null,"code":"'use strict';\n\nvar utils = require('core-util-is');\n\nvar isStearm = require('isstream'); // wait for https://github.com/miguelmota/is-class/pull/6 merge\n\n\nvar isClass = require('is-class-hotfix');\n/**\n * Expose all methods in core-util-is\n */\n\n\nObject.keys(utils).map(function (name) {\n  exports[transform(name)] = utils[name];\n});\n/**\n * Stream detected by isstream\n */\n\nexports.stream = isStearm;\nexports.readableStream = isStearm.isReadable;\nexports.writableStream = isStearm.isWritable;\nexports.duplexStream = isStearm.isDuplex;\n/**\n * Class detected by is-class\n */\n\nexports[\"class\"] = isClass;\n/**\n * Extend method\n */\n\nexports.finite = Number.isFinite;\nexports.NaN = Number.isNaN;\n\nexports.generator = function (obj) {\n  return obj && 'function' === typeof obj.next && 'function' === typeof obj[\"throw\"];\n};\n\nexports.generatorFunction = function (obj) {\n  return obj && obj.constructor && 'GeneratorFunction' === obj.constructor.name;\n};\n\nexports.asyncFunction = function (obj) {\n  return obj && obj.constructor && 'AsyncFunction' === obj.constructor.name;\n};\n\nexports.promise = function (obj) {\n  return obj && 'function' === typeof obj.then;\n};\n\nvar MAX_INT_31 = Math.pow(2, 31);\n\nexports[\"int\"] = function (obj) {\n  return utils.isNumber(obj) && obj % 1 === 0;\n};\n\nexports.int32 = function (obj) {\n  return exports[\"int\"](obj) && obj < MAX_INT_31 && obj >= -MAX_INT_31;\n};\n\nexports[\"long\"] = function (obj) {\n  return exports[\"int\"](obj) && (obj >= MAX_INT_31 || obj < -MAX_INT_31);\n};\n\nexports.Long = function (obj) {\n  return exports.object(obj) && exports.number(obj.high) && exports.number(obj.low);\n};\n\nexports[\"double\"] = function (obj) {\n  return utils.isNumber(obj) && !isNaN(obj) && obj % 1 !== 0;\n};\n/**\n * override core-util-is\n */\n\n\nexports.date = function isDate(obj) {\n  return obj instanceof Date;\n};\n\nexports.regExp = function isRegExp(obj) {\n  return obj instanceof RegExp;\n};\n\nexports.regexp = exports.regExp;\n\nexports.error = function isError(obj) {\n  return obj instanceof Error;\n};\n\nexports.array = Array.isArray;\n/**\n * transform isNull type to null\n * @param {[type]} m [description]\n * @return {[type]} [description]\n */\n\nfunction transform(m) {\n  var name = m.slice(2);\n  name = name[0].toLowerCase() + name.slice(1);\n  return name;\n}","map":null,"metadata":{},"sourceType":"module"}